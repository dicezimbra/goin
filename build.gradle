buildscript {
    ext.kotlin_version = '1.3.21'
    ext.kotlin_version = '1.3.20'
    ext.kotlin_version = '1.3.11'

    ext {
        compileSdkVersion = 28
        buildToolsVersion = "28.0.3"
        targetSdkVersion = 28
        minSdkVersion = project.hasProperty('MIN_SDK') ? project.getProperty("MIN_SDK") as Integer : 19
        kotlin_version = '1.3.0'
    }

    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots"}
    }

    dependencies {
        classpath "gradle.plugin.com.github.konifar.gradle:plugin:0.3.3"
        classpath 'com.jakewharton:butterknife-gradle-plugin:10.0.0'
        classpath 'com.android.tools.build:gradle:3.3.1'
        classpath 'com.google.gms:google-services:4.2.0'

        classpath 'io.fabric.tools:gradle:1.27.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        classpath "com.dicedmelon.gradle:jacoco-android:0.1.3"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
        classpath("com.github.triplet.gradle:play-publisher:2.2.0-SNAPSHOT")
    }
}

apply plugin: 'org.sonarqube'

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.fabric.io/public' }
    }

    afterEvaluate {
        tasks.withType(JavaCompile.class) {
            options.compilerArgs << "-Xmaxerrs" << "700"
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "br.com.goin.GoIn-Jumpers-Coverage"
        property "sonar.projectName", "GoIn-Jumpers-Coverage"
        property "sonar.projectVersion", "1.0"
        property "sonar.exclusions", "robospice/**/*"
        property "sonar.host.url", "http://localhost:9000"

        property "sonar.sources", "src/main/java"
        property "sonar.binaries", "build/intermediates/classes/debug"
        property "sonar.java.binaries", "build/intermediates/classes/debug"
        property "sonar.tests", "src/test/java, src/androidTest/java"
        property "sonar.java.test.binaries", "build/intermediates/classes/debug"

        def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files
        def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files
        unit.addAll(ui)
        def files = unit.join(", ")

        property "sonar.jacoco.reportPaths", files
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
        property "sonar.android.lint.report", "build/reports/lint-results.xml"
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def readReleaseVersionCode() {
    def versionPropsFile = file('version.properties')
    Properties versionProps = new Properties()

    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
    } else {
        versionProps['BUILD_NUMBER_RELEASE'] = '0'
    }
    return versionProps['BUILD_NUMBER_RELEASE'].toInteger()
}

def increaseReleaseVersionCode() {
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask("assembleRelease")) {
            def versionPropsFile = file('version.properties')
            Properties versionProps = new Properties()

            if (versionPropsFile.canRead()) {
                versionProps.load(new FileInputStream(versionPropsFile))
            } else {
                versionProps['BUILD_NUMBER_RELEASE'] = '0'
            }

            def codeRelease = versionProps['BUILD_NUMBER_RELEASE'].toInteger() + 1

            versionProps['BUILD_NUMBER_RELEASE'] = codeRelease.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        }
    }
}
